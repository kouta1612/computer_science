// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
    // decode(instruction[16]: ixxaccccccdddjjj)
    // (i: instruction[15], a: instruction[12], cccccc: instruction[6..11], ddd: instruction[3..5], jjj: instruction[0..2])

    // 命令メモリかデータメモリのどちらかを出力
    Mux16(a=instruction, b=aluOut, sel=instruction[15], out=aRegisterIn);
    // Aレジスタに入力を読み込ませるか
    Not(in=instruction[15], out=notInstruction15);
    Or(a=notInstruction15, b=instruction[5], out=aLoad);
    // Aレジスタ処理
    ARegister(in=aRegisterIn, load=aLoad, out=aRegisterOut);

    // ALUの入力データは「Dレジスタ値」と「Aレジスタ or メモリ入力」から構成される
    // instruction[12]=0 のときはAレジスタ、instruction[12]=1 のときはメモリ入力
    Mux16(a=aRegisterOut, b=inM, sel=instruction[12], out=aluIn);
    And(a=instruction[4], b=instruction[15], out=dLoad);
    DRegister(in=aluOut, load=dLoad, out=dRegisterOut);
    ALU(x=dRegisterOut, y=aluIn, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=outM, out=aluOut, zr=zr, ng=ng);

    // ALUと命令のjビットからpcLoadを算出し、PC回路に入力
    Or(a=zr, b=ng, out=tmp0);
    Not(in=tmp0, out=pl);
    And(a=instruction[2], b=ng, out=j2);
    And(a=instruction[1], b=zr, out=j1);
    And(a=instruction[0], b=pl, out=j0);
    Or(a=j2, b=j1, out=tmp1);
    Or(a=tmp1, b=j0, out=tmp2);
    And(a=tmp2, b=instruction[15], out=pcLoad);
    PC(in=aRegisterOut, load=pcLoad, inc=true, reset=reset, out[0..14]=pc);

    // 残りの出力を算出
    And(a=instruction[15], b=instruction[3], out=writeM);
    And16(a=true, b=aRegisterOut, out[0..14]=addressM);
}
